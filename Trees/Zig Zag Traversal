//Driver Function
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000
// Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
};
// Utility function to create a new Tree Node
Node* newNode(int val) {
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}
// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N') return NULL;
    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;
    istringstream iss(str);
        for (string str; iss >> str;) ip.push_back(str);
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
        // Get the current node's value from the string
        string currVal = ip[i];
        // If the left child is not null
        if (currVal != "N") {
            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));
            // Push it to the queue
            queue.push(currNode->left);
        }
        // For the right child
        i++;
                if (i >= ip.size()) break;
        currVal = ip[i];
        // If the right child is not null
        if (currVal != "N") {
            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    return root;
}



class Solution{
    public:
    //Function to store the zig zag order traversal of tree in a list.
    vector <int> zigZagTraversal(Node* root)
    {
        vector<int> res;
        if(root == NULL) return res;
        
        queue<Node*> q;
        q.push(root);
        
        bool LtoR = true;
        
        while(!q.empty()){
            
            int size = q.size();
            vector<int> ans(size);
            
            // Processiong each Level
    
            for(int i =0; i<size; i++){
                
                Node* temp = q.front();
                q.pop();
                
            // Dirsction: whether LtoR or RtoL
            
                // int index = LtoR ? i : size- i - 1 ;
                if(LtoR){
                    ans[i] = temp->data;
                }
                else{
                    ans[size - i - 1] = temp->data;
                }
                // ans[i] = temp->data;
                
                if(temp->left) 
                q.push(temp->left);
                
                if(temp->right) 
                q.push(temp->right);                
            }            
            
            // Reversing the current Direction for next iteration
            
            LtoR = !LtoR;
            
            for(auto i : ans){
                res.push_back(i);
            }
            
            
        }
        return res;
    }
};
